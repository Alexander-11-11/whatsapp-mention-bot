const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const fs = require('fs');
const path = require('path');

class WhatsAppBot {
    constructor() {
        this.client = new Client({
            authStrategy: new LocalAuth({
                dataPath: './session'
            }),
            puppeteer: {
                args: [
                    '--no-sandbox',
                    '--disable-setuid-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-accelerated-2d-canvas',
                    '--no-first-run',
                    '--no-zygote',
                    '--single-process',
                    '--disable-gpu'
                ]
            }
        });
        this.isReady = false;
        this.qrCode = null;
        this.statusLog = [];
        this.setupEventHandlers();
    }

    setupEventHandlers() {
        this.client.on('qr', (qr) => {
            this.qrCode = qr;
            qrcode.generate(qr, { small: true });
            const message = 'QR Code generated! Scan with your WhatsApp mobile app';
            console.log('üì± ' + message);
            this.addToLog('info', message);
        });

        this.client.on('ready', () => {
            this.isReady = true;
            this.qrCode = null;
            const message = 'WhatsApp Bot is ready and connected!';
            console.log('‚úÖ ' + message);
            this.addToLog('success', message);
        });

        this.client.on('authenticated', () => {
            const message = 'Authentication successful!';
            console.log('üîê ' + message);
            this.addToLog('success', message);
        });

        this.client.on('auth_failure', (msg) => {
            const message = `Authentication failed: ${msg}`;
            console.log('‚ùå ' + message);
            this.addToLog('error', message);
        });

        this.client.on('disconnected', (reason) => {
            this.isReady = false;
            const message = `Bot disconnected: ${reason}`;
            console.log('üì¥ ' + message);
            this.addToLog('warning', message);
        });

        this.client.on('message', async (msg) => {
            try {
                await this.handleMessage(msg);
            } catch (error) {
                console.error('‚ùå Error handling message:', error);
                this.addToLog('error', `Error handling message: ${error.message}`);
            }
        });
    }

    async handleMessage(msg) {
        const messageInfo = `Message from ${msg.from}: ${msg.body}`;
        console.log('üì© ' + messageInfo);

        // Command: !ŸÖŸÜÿ¥ŸÜ_ÿ¨ŸÖÿßÿπŸä
        if (msg.body.toLowerCase() === '!ŸÖŸÜÿ¥ŸÜ_ÿ¨ŸÖÿßÿπŸä') {
            const chat = await msg.getChat();
            if (!chat.isGroup) {
                await msg.reply('‚ùå Ÿáÿ∞ÿß ÿßŸÑÿ£ŸÖÿ± ŸÖÿÆÿµÿµ ŸÑŸÑŸÖÿ¨ŸÖŸàÿπÿßÿ™ ŸÅŸÇÿ∑!');
                return;
            }

            const admins = chat.participants.filter(p => p.isAdmin || p.isSuperAdmin);
            const members = chat.participants.filter(p => !p.isAdmin && !p.isSuperAdmin);

            let text = `*‚óï‚óï‚ïê‚ïê‚ïê‚ïêüåü ŸÖŸÜÿ¥ŸÜ ÿ¨ŸÖÿßÿπŸäüåü‚ïê‚ïê‚ïê‚ïê‚óï‚óï*\n\n`;
            text += `*${chat.name}*\n\n`;

            text += `*|üëëÿßŸÑÿ£ÿØŸÖŸÜÿ≤:*\n\n`;
            admins.forEach((admin, index) => {
                text += `*${index + 1}|üëë*@${admin.id.user}\n`;
            });

            text += `\n*‚ñÇ‚ñÉ‚ñÖ‚ñá‚ñà‚ñì‚ñí‚ñë  ÿßŸÑÿßÿπÿ∂ÿßÿ°  ‚ñë‚ñí‚ñì‚ñà‚ñá‚ñÖ‚ñÉ‚ñÇ*\n\n`;
            members.forEach((member, index) => {
                text += `*${index + 1}|* üë§@${member.id.user}\n`;
            });
            text += `\n*‚óï‚óï‚ïê‚ïê‚ïê‚ïêüåü ŸÖŸÜÿ¥ŸÜ ÿ¨ŸÖÿßÿπŸäüåü‚ïê‚ïê‚ïê‚ïê‚óï‚óï*\n\n`;
            text += `*ÍßÅ‡øá‚∏ô ŸÖŸÄÿπ ÿ™ŸÄÿ≠ŸÄüñãÔ∏èŸÄŸäŸÄÿßÿ™ ÿßÿØÿßÿ±ÿ©‚§¶ ${chat.name} ‡øáÍßÇ*`;

            const mentions = [...admins, ...members].map(p => p.id._serialized);
            await chat.sendMessage(text, { mentions });
            this.addToLog('success', `Successfully mentioned ${mentions.length} participants in ${chat.name}`);
        }
        // Command: !help or !ŸÖÿ≥ÿßÿπÿØÿ©
        else if (msg.body.toLowerCase() === '!help' || msg.body.toLowerCase() === '!ŸÖÿ≥ÿßÿπÿØÿ©') {
            const helpText = `ü§ñ *WhatsApp Mention Bot*

üìã *Available Commands:*
‚Ä¢ \`!ŸÖŸÜÿ¥ŸÜ_ÿ¨ŸÖÿßÿπŸä\` - Mention all group members
‚Ä¢ \`!help\` - Show this help message

üìù *Notes:*
‚Ä¢ Commands only work in group chats
‚Ä¢ Bot requires admin permissions for best functionality

üåê *Languages:*
‚Ä¢ English & Arabic supported

Made with ‚ù§Ô∏è using whatsapp-web.js`;

            await msg.reply(helpText);
            this.addToLog('info', 'Help command executed');
        }
    }

    addToLog(type, message) {
        const timestamp = new Date().toISOString();
        this.statusLog.unshift({
            timestamp,
            type,
            message
        });
        if (this.statusLog.length > 100) {
            this.statusLog = this.statusLog.slice(0, 100);
        }
    }

    getStatus() {
        return {
            isReady: this.isReady,
            qrCode: this.qrCode,
            logs: this.statusLog
        };
    }

    async initialize() {
        try {
            console.log('üöÄ Initializing WhatsApp Bot...');
            this.addToLog('info', 'Bot initialization started');
            await this.client.initialize();
        } catch (error) {
            console.error('‚ùå Failed to initialize bot:', error);
            this.addToLog('error', `Failed to initialize: ${error.message}`);
        }
    }

    async destroy() {
        try {
            console.log('üõë Shutting down WhatsApp Bot...');
            this.addToLog('info', 'Bot shutdown initiated');
            await this.client.destroy();
        } catch (error) {
            console.error('‚ùå Error during shutdown:', error);
            this.addToLog('error', `Shutdown error: ${error.message}`);
        }
    }
}

module.exports = WhatsAppBot;
